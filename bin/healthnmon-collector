#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

#          (c) Copyright 2012 Hewlett-Packard Development Company, L.P.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

from nova import config
from nova import service, utils
from nova.openstack.common import cfg
from healthnmon import log as logging
import eventlet
import gettext
import os
import sys
import healthnmon
from healthnmon.collector.service import HealthnmonCollectorService

"""Starter script for healthnmon module."""

healthnmon_collector_opts = [
    cfg.StrOpt('healthnmon_collector_manager',
               default=
               'healthnmon.collector.manager.HealthnMonCollectorManager',
               help='The healthnmon collector manager class to use'),
    cfg.StrOpt('healthnmon_collector_topic',
               default='healthnmon.collector',
               help='The topic used by healthnmon-collector'), ]
CONF = cfg.CONF
CONF.register_opts(healthnmon_collector_opts)

eventlet.monkey_patch(
    all=False, os=True, select=True, socket=True, thread=False, time=True)


# If ../healthnmon/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'healthnmon', '__init__.py')):
    sys.path.insert(0, possible_topdir)

gettext.install('healthnmon', unicode=1)

if __name__ == '__main__':
    logging.healthnmon_collector_setup()
    utils.monkey_patch()
    config.parse_args(sys.argv)
    server = HealthnmonCollectorService.create(
        binary='healthnmon-collector',
        topic=CONF.healthnmon_collector_topic,
        manager=CONF.healthnmon_collector_manager)
    service.serve(server)
    service.wait()
